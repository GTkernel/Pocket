syntax = "proto3";
package yolo_tf;

service YoloTensorflowWrapper {
    // Control Procedures
    rpc SayHello (HelloRequest) returns (HelloReply) {}
    rpc Connect (ConnectRequest) returns (ConnectResponse) {}
    rpc Disconnect (DisconnectRequest) returns (DisconnectResponse) {}

    // TF Wrappers
    rpc callable_emulator (CallRequest) returns (CallResponse) {}
    rpc get_iterable_slicing(SlicingRequest) returns (SlicingResponse) {}
    rpc constant (ConstantRequest) returns (ConstantResponse) {}
    rpc config_experimental_list__physical__devices (DeviceType) returns (PhysicalDevices) {}
    rpc image_decode__image(DecodeImageRequest) returns (DecodeImageResponse) {}
    rpc expand__dims(ExpandDemensionRequest) returns (ExpandDemensionResponse) {}
    rpc keras_layers_Input(InputRequest) returns (InputResponse) {}
    rpc keras_Model(ModelRequest) returns (ModelResponse) {}
    rpc keras_layers_ZeroPadding2D(ZeroPadding2DRequest) returns (ZeroPadding2DResponse) {}
    rpc keras_layers_Conv2D(Conv2DRequest) returns (Conv2DResponse) {}
    rpc keras_layers_LeakyReLU (LeakyReluRequest) returns (LeakyReluResponse) {}
    rpc keras_layers_Add (AddRequest) returns (AddResponse) {}
    rpc keras_layers_Lambda(LambdaRequest) returns (LambdaResponse) {}
    rpc keras_layers_UpSampling2D(UpSampling2DRequest) returns (UpSampling2DResponse) {}
    rpc keras_layers_Concatenate(ConcatenateRequest) returns (ContcatenateResponse) {}
    rpc image_resize(ImageResizeRequest) returns (ImageResizeResponse) {}
    rpc keras_regularizers_l2(l2Request) returns (l2Response) {}

    // attribute getters
    rpc attribute_tensor_shape(TensorShapeRequest) returns (TensorShapeResponse) {}
    rpc attribute_model_load__weights(LoadWeightsRequest) returns (LoadWeightsResponse) {}
    rpc attribute_checkpoint_expect__partial(ExpectPartialRequest) returns (ExpectPartialResponse) {}

    // tensor operations
    rpc tensor_op_divide(DivideRequest) returns (DivideResponse) {}

    // common operations
    rpc iterable_indexing(IndexingRequest) returns (IndexingResponse) {}
    rpc byte_tensor_to_numpy(TensorToNumpyRequest) returns (TensorToNumPyResponse) {}
    rpc get_object_by_id(GetObjectRequest) returns (GetObjectResponse) {}

    // YoloWrappers
    rpc CheckIfModelExist (CheckModelExistRequest) returns (CheckModelExistResponse) {}
    rpc batch_normalization (BatchNormRequest) returns (BatchNormResponse) {}

}

/// Connect
message ConnectRequest {
    string id = 1;
    string container_id=2;
    enum ObjectTransfer {
        NONE = 0;
        BINARY = 1;
        PATH = 2;
        REDIS_OBJ_ID = 3;
        SHMEM = 4;
    }
    ObjectTransfer object_transfer=3;
}

message ConnectResponse {
    bool accept = 1;
}
/// Disconnect
message DisconnectRequest {
    string container_id = 1;
}

message DisconnectResponse {

}



/// SayHello
message HelloRequest {
    string name = 1;
}

message HelloReply {
    string message = 1;
}

/// callable_emulator
message CallRequest {
    message ObjId {
        uint64 obj_id = 1;
        bool release = 2;
    }
    uint64 callable_obj_id = 1;
    string callable_model_name = 2;
    bool inference = 3;
    repeated bytes pickled_args = 4;
    repeated ObjId obj_ids = 5;
    int32 num_of_returns = 6;
    string container_id = 7;
}

message CallResponse {
    bool pickled = 1;
    repeated bytes pickled_result = 2;
    repeated uint64 obj_ids = 3;
}

/// get_iterable_slicing
message SlicingRequest {
    uint64 iterable_id = 1;
    uint32 start = 2;
    uint32 end = 3;
    string container_id = 4;
}
message SlicingResponse {
    uint64 obj_id = 1;
}


/// constant 
message ConstantRequest {
    bytes value = 1;
    string container_id = 2;
}

message ConstantResponse {
    bytes tensor = 1;
}

///config_experimental_list__physical__devices
message DeviceType {
    string device_type = 1;
    string container_id = 2;
}

message PhysicalDevices {
    message PhysicalDevice {
        string name = 1;
        string device_type = 2;
    }
    repeated PhysicalDevice devices = 1;
}

/// image_decode__image
message DecodeImageRequest {
    enum ObjectTransfer {
        NONE = 0;
        BINARY = 1;
        PATH = 2;
        REDIS_OBJ_ID = 3;
        SHMEM = 4;
    }
    ObjectTransfer data_channel = 1;
    string image_path = 2;
    int32 channels = 3;
    string container_id = 4;
    bool path_raw_dir = 5;
    int32 shmem_offset = 6;
    int32 shmem_size = 7;
    bytes bin_image = 8;
}

message DecodeImageResponse {
    uint64 obj_id = 1;
}

/// expand__dims
message ExpandDemensionRequest {
    uint64 obj_id = 1;
    int32 axis = 2;
    string container_id = 3;
}

message ExpandDemensionResponse {
    uint64 obj_id = 1;
}

/// keras_layers_Input
// https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/keras/Input
message InputRequest {
    repeated int32 shape = 1;
    string name = 2;
    string container_id = 3;
}

message InputResponse {
    uint64 obj_id = 1;
}

// /// keras_Model
message ModelRequest {
    repeated uint64 input_ids = 1;
    repeated uint64 output_ids = 2;
    string name = 3;
    string container_id = 4;
    bool fixed = 5;
}

message ModelResponse {
    uint64 obj_id = 1;
}

/// keras_layers_ZeroPadding2D
message ZeroPadding2DRequest {
    bytes padding = 1;
    string data_format = 2;
    string name = 3;
    string container_id = 4;
}

message ZeroPadding2DResponse {
    uint64 obj_id = 1;
}

// keras_layers_Conv2D
message Conv2DRequest {
    int32 filters = 1;
    bytes pickled_kernel_size = 2;
    bytes pickled_strides = 3;
    string padding = 4;
    bool use_bias = 5;
    bytes pickled_kernel_regularizer = 6;
    string name = 7;
    string container_id = 8;
}

message Conv2DResponse {
    uint64 obj_id = 1;
}

/// keras_layers_LeakyReLU
message LeakyReluRequest {
    float alpha = 1;
    string name = 2;
    string container_id = 3;
}

message LeakyReluResponse {
    uint64 obj_id = 1;
}

/// keras_layers_Add

message AddRequest {
    string name = 1;
    string container_id = 2;
}

message AddResponse {
    uint64 obj_id = 1;
}


/// keras_layers_Lambda

message LambdaRequest {
    string expr = 1;
    string name = 2;
    string container_id = 3;
}

message LambdaResponse {
    uint64 obj_id = 1;
}

/// keras_layers_UpSampling2D

message UpSampling2DRequest {
    uint32 size = 1;
    string container_id = 2;
}

message UpSampling2DResponse {
    uint64 obj_id = 1;
}
/// keras_layers_Concatenate

message ConcatenateRequest {
    string container_id = 1;
} 

message ContcatenateResponse {
    uint64 obj_id = 1;
}

/// keras_regularizers_l2

message l2Request {
    float l = 1;
    string container_id = 2;
} 

message l2Response {
    bytes pickled_l2 = 1;
}



/// image_resize
message ImageResizeRequest {
    uint64 obj_id = 1;
    repeated uint32 size = 2;
    string container_id = 3;
} 

message ImageResizeResponse {
    uint64 obj_id = 1;
}



/////////////////////////////////
/// attribute_tensor_shape    

message TensorShapeRequest {
    uint64 obj_id = 1;
    uint32 start = 2;
    uint32 end = 3;
    string container_id = 4;
}

message TensorShapeResponse {
    uint64 obj_id = 1;
    repeated int32 shape = 2;

}


/// attribute_model_load__weights
message LoadWeightsRequest {
    string model_name = 1;
    string weights_path = 2;
    string container_id = 3;
}

message LoadWeightsResponse {
    uint64 obj_id = 1;
}

/// attribute_checkpoint_expect__partial
message ExpectPartialRequest {
    uint64 obj_id = 1;
    string container_id = 2;
}

message ExpectPartialResponse {

}

/// tensor_op_divide
message DivideRequest {
    uint64 obj_id = 1;
    int32 divisor = 2;
    string container_id = 3;

}

message DivideResponse {
    uint64 obj_id = 1;
}



/////////////////////////////////

/// iterable_indexing
message IndexingRequest {
    uint64 obj_id = 1;
    repeated uint32 indices = 2;
    string container_id = 3;

}

message IndexingResponse {
    bytes pickled_result = 1;
}


/// byte_tensor_to_numpy

message TensorToNumpyRequest {
    uint64 obj_id = 1;
    string container_id = 2;

}

message TensorToNumPyResponse {
    bytes pickled_array = 1;
    uint32 data_length = 2;
}


/// get_object_by_id
message GetObjectRequest {
    uint64 obj_id = 1;
    string container_id = 2;
}
message GetObjectResponse {
    bytes object = 1;
}

/////////////////////////////////

/// Yolo Wrappers

/// CheckIfModelExist
message CheckModelExistRequest {
    string container_id = 1;
    string name = 2;
    bool plan_to_make = 3;
}
message CheckModelExistResponse {
    bool exist = 1;
    uint64 model_obj_id = 2;
}

/// batch_normalization
message BatchNormRequest {
    string name = 1;
    string container_id = 2;
}

message BatchNormResponse {
    uint64 obj_id = 1;
}

