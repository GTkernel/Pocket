#!/bin/bash

APPS=(mobilenetv2 resnet50 ssdmobilenetv2_320x320 ssdresnet50v1_640x640 smallbert talkingheads)
# NUMINSTANCES=1
DEVICE=cpu
ITERATIONS=10

function main() {
    PWD=$(pwd)
    SCRIPTDIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
    COMMAND=$1
    GPU=0

    if [[ "$PWD" != "$SCRIPTDIR" ]]; then
        print_error "This script needs to be launched in its own root directory!\nexit"
        exit 1
    fi

    parse_arg "${@:2}"

    case $COMMAND in
        hello-world)
            local app=
            print_info "CURRENT APPLICATION=$app, RATIO=${ratio[$app]}"
            cd ../applications/${app}
            if [[ $DEVICE = "gpu"]]; then
                bash exp_script.sh latency-mon-gpu -n=1 --policy=1 --device=$DEVICE
                bash exp_script.sh latency-gpu -n=1 --policy=1 --device=$DEVICE
            else
                bash exp_script.sh latency-mon -n=1 --policy=1 --device=$DEVICE
                bash exp_script.sh latency -n=1 --policy=1 --device=$DEVICE
            fi
            cd - > /dev/null 2>&1
            ;;
        latency)
            print_warning "This script requires bash version newer than 4.0. The current version is ${BASH_VERSION}."
            declare -A ratio
            ratio+=( ["mobilenetv2"]=0.8 ["resnet50"]=0.8 ["ssdmobilenetv2_320x320"]=0.8 ["ssdresnet50v1_640x640"]=0.8 ["smallbert"]=0.8 ["talkingheads"]=0.8 )
            for app in ${APPS[@]}; do
                echo
                mempolicy=( NONE func,ratio,${ratio[$app]} conn,ratio,${ratio[$app]} func,none )
                cpupolicy=( NONE func,ratio,${ratio[$app]} conn,ratio,${ratio[$app]} func,none )
                print_info "CURRENT APPLICATION=$app, RATIO=${ratio[$app]}"
                cd ../applications/${app}
                    print_info "$app-pocket"
                    for p in 1 2 3; do
                        for n in $(seq 1 10); do
                            print_info "$app-pocket policy=$p, n=$n, i=$ITERATIONS"
                            for i in $(seq 1 $ITERATIONS); do
                                bash exp_script.sh latency \
                                    -n=$n \
                                    --mempolicy=${mempolicy[$p]} \
                                    --cpupolicy=${cpupolicy[$p]} \
                                    --device=$DEVICE 2>&1 | grep inference_time | sed 's/^.*inference_time=//g'
                            done
                        done
                    done
                    print_info "$app-monolithic"
                    for n in $(seq 1 10); do
                        print_info "$app-pocket n=$n, i=$ITERATIONS"
                        for i in $(seq 1 $ITERATIONS); do
                            bash exp_script.sh latency-mon -n=$n --policy=1 --device=$DEVICE 2>&1 | grep inference_time | sed 's/^.*inference_time=//g'
                        done
                    done
                cd - > /dev/null 2>&1
            done
            ;;
        latency-gpu)
            print_warning "This script requires bash version newer than 4.0. The current version is ${BASH_VERSION}."
            declare -A ratio
            ratio+=( ["mobilenetv2"]=0.8 ["resnet50"]=0.8 ["ssdmobilenetv2_320x320"]=0.8 ["ssdresnet50v1_640x640"]=0.8 ["smallbert"]=0.8 ["talkingheads"]=0.8 )
            for app in ${APPS[@]}; do
                echo
                mempolicy=( NONE func,ratio,${ratio[$app]} conn,ratio,${ratio[$app]} func,none )
                cpupolicy=( NONE func,ratio,${ratio[$app]} conn,ratio,${ratio[$app]} func,none )
                print_info "CURRENT APPLICATION=$app, RATIO=${ratio[$app]}"
                cd ../applications/${app}
                    print_info "$app-pocket"
                    for p in 1 2 3; do
                        for n in 1 3 5 10 15 20; do
                            print_info "$app-pocket policy=$p, n=$n, i=$ITERATIONS"
                            inf_arr=()
                            be_arr=()
                            fe_arr=()
                            for i in $(seq 1 $ITERATIONS); do
                                IFS=$'\n' lines=($(bash exp_script.sh latency-gpu \
                                    -n=$n \
                                    --mempolicy=${mempolicy[$p]} \
                                    --cpupolicy=${cpupolicy[$p]} \
                                    --device=$DEVICE 2>&1 | grep _time))
                                # echo \#lines ${#lines[@]}
                                # echo lines ${lines[@]}
                                local last_idx=$(( ${#lines[@]} - 1 ))
                                for i in $(seq 0 $last_idx); do
                                    # echo line=${lines[$i]}
                                    if [[ ${lines[$i]} == *"inference_time"* ]]; then
                                        local inf=$(echo ${lines[$i]} | grep inference_time | sed 's/^.*inference_time=//g')
                                        # echo inf=$inf
                                        inf_arr+=($inf)
                                    elif [[ ${lines[$i]} == *"be_time"* ]]; then
                                        local be=$(echo ${lines[$i]} | grep be_time | sed 's/^.*be_time=//g')
                                        # echo be=$be
                                        be_arr+=($be)
                                    elif [[ ${lines[$i]} == *"fe_time"* ]]; then
                                        local fe=$(echo ${lines[$i]} | grep fe_time | sed 's/^.*fe_time=//g')
                                        # echo fe=$fe
                                        fe_arr+=($fe)
                                    fi
                                done

                                # bash exp_script.sh latency-gpu \
                                #     -n=$n \
                                #     --mempolicy=${mempolicy[$p]} \
                                #     --cpupolicy=${cpupolicy[$p]} \
                                #     --device=$DEVICE 2>&1 | grep inference_time | sed 's/^.*inference_time=//g'
                            done
                            echo inference_time ${inf_arr[@]}
                            echo be_time ${be_arr[@]}
                            echo fe_time ${fe_arr[@]}
                        done
                    done
                    print_info "$app-monolithic"
                    for n in 1 3 5 10 15 20; do
                        print_info "$app-pocket n=$n, i=$ITERATIONS"
                        inf_arr=()
                        for i in $(seq 1 $ITERATIONS); do
                            IFS=$'\n' lines=($(bash exp_script.sh latency-mon-gpu -n=$n --policy=1 --device=$DEVICE 2>&1 | grep inference_time))
                            local last_idx=$(( ${#lines[@]} - 1 ))
                            for i in $(seq 0 $last_idx); do
                                local inf=$(echo ${lines[$i]} | grep inference_time | sed 's/^.*inference_time=//g')
                                # echo line=${lines[$i]}
                                # echo inf=$inf
                                inf_arr+=($inf)
                            done
                        done
                        echo inference_time ${inf_arr[@]}
                    done
                cd - > /dev/null 2>&1
            done
            ;;
        latency-tmp)
            print_warning "This script requires bash version newer than 4.0. The current version is ${BASH_VERSION}."
            declare -A ratio
            ratio+=( ["mobilenetv2"]=0.8 ["resnet50"]=0.8 ["ssdmobilenetv2_320x320"]=0.8 ["ssdresnet50v1_640x640"]=0.8 ["smallbert"]=0.8 ["talkingheads"]=0.8 )
            APPS=(ssdresnet50v1_640x640)
            ITERATIONS=1
            for app in ${APPS[@]}; do
                echo
                mempolicy=( NONE func,ratio,${ratio[$app]} conn,ratio,${ratio[$app]} func,none )
                cpupolicy=( NONE func,ratio,${ratio[$app]} conn,ratio,${ratio[$app]} func,none )
                print_info "CURRENT APPLICATION=$app, RATIO=${ratio[$app]}"
                cd ../applications/${app}
                    print_info "$app-pocket"
                    for p in 1 2; do
                        for n in 1 5 10 20; do
                            print_info "$app-pocket policy=$p, n=$n, i=$ITERATIONS"
                            for i in $(seq 1 $ITERATIONS); do
                                bash exp_script.sh latency-gpu \
                                    -n=$n \
                                    --mempolicy=${mempolicy[$p]} \
                                    --cpupolicy=${cpupolicy[$p]} \
                                    --device=$DEVICE 2>&1 | grep inference_time | sed 's/^.*inference_time=//g'
                                
                            done
                        done
                    done
                cd - > /dev/null 2>&1
            done
            ;;
        eval-policy)
            # @Todo
            ;;
        exec-breakdown)
            # @Todo
            ;;
        latency-fc)
            # @Todo
            ;;
        *)
            print_error "No such command: $COMMAND"
            ;;
    esac
}

function parse_arg() {
    for arg in $@; do
        case $arg in
            --gpu=*)
                GPU=${arg#*=}
                DEVICE=$([[ $GPU = "1" ]] && echo gpu || echo cpu)
                ;;
            --app=*|-a=*)
                APPS=(${arg#*=})
                ;;
            --apps=*)
                IFS=',' read -r -a APPS <<< "${arg#*=}"
                ;;
            # --num=*|-n=*)
            #     NUMINSTANCES=${args#*=}
            #     ;;
            --iteration=*|--iter=*|-i=*)
                ITERATIONS=${arg#*=}
                ;;
            *)
                print_error "No such option: $arg"
                ;;
        esac
    done
}

_BOLD="\e[1m"
_DIM="\e[2m"
_RED="\e[31m"
_LYELLOW="\e[93m"
_LGREEN="\e[92m"
_LCYAN="\e[96m"
_LMAGENTA="\e[95m"
_RESET="\e[0m"


function print_error() {
    local message=$1
    echo -e "${_BOLD}${_RED}[ERROR]${_RESET} ${message}${_RESET}"

}

function print_warning() {
    local message=$1
    echo -e "${_BOLD}${_LYELLOW}[WARN]${_RESET} ${message}${_RESET}"

}

function print_info() {
    local message=$1
    echo -e "${_BOLD}${_LGREEN}[INFO]${_RESET} ${message}${_RESET}"

}

function print_debug() {
    local message=$1
    echo -e "${_BOLD}${_LCYAN}[DEBUG]${_RESET} ${message}${_RESET}"

}

main "$@"; exit